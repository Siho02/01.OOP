학습 내용

1. class 개발 방법 review
    - 설계도

2. 객체(object, instance) 생성 및 활용 방법 review
    - 설계도인 class를 기반으로 생성된 사용 가능한 데이터(변수)와 기능(메소드) 묶음

3. 모듈화 해서 사용

4. *.py라는 확장자 파일 실행시 개발 방법
    if __name__ == '__main__':

5. jupyter notebook
    - 실시간 개발 시 빠른 확인을 가능하게 해주는 tool
    - 실시간 print() 함수 사용 없이도 일정 부분 출력
    - 실제 사용 가능한 소스는 *.py로 개발 또는 머신/딥러닝 학습된 모델은 h5 파일로 생성해 사용

6. 실습 예시 
    - Book Shop 관리 application 개발
    - 서비스 받는 client = Book Shop 운영자 따라서 어떤 고객이 무슨 책을 구매했는지 정보 확인
    
    1) 정보 : 고객(이름, 등급) / 책(제목, 저자)
    2) 관리자가 요청시 고객과 책 정보가 화면에 출력
        - 하나의 고객은 책 한권만 구매 가능
    3) 실제 개발 설계
        - 경우의 수 1 : 고객 클래스 / 책 클래스 / 고객 & 책에 대한 정보을 활용 가능하게 생성 및 서비스 클래스
            
            CustomerInfo.py
                Customer 클래스 개발 모듈(파일)
            
            BookInfo.py
                Book 클래스 개발 모듈
            
            Bookshop.py
                Customer와 Book 정보 저장 및 사용 모듈
        
        - 경우의 수 2 : 하나의 py 파일에 모든 것을 개별 함수로 개발
    4) 고려사항
        (1) 한번 구현 후 지속적으로 사용을 위해서는 재사용성과 요구사항 변경 시 쉽게 수정 가능한 유연성(확장성)이 좋은 구조로 개발
            - 고객은 1명 ~ 100명 ~ ...
            - 책 1권 ~ 100권 ~ ...
        (2) 고객관리 프로그램
            - 회원가입(insert, create) / 탈퇴(delete) / 수정(update) / 검색(id, age, name) : select(질의, query)
            - CRUD
            - 회원 가입 후 로그인 로직을 구현해야 하는 상황
                -경우의 수 1 : 회원 가입 기능과 로그인 기능을 별도의 메소드로 개발
                    - 최적의 구조
                -경우의 수 2 : 회원 가입 기능과 로그인 기능을 하나의 메소드로 개발
                    - 단점 : 회원 가입한 자가 회원 가입 후 로그인을 한다는 보장이 없음 
    alt + shift + (방향키) : 위 아래로 복제
    alt + (방향키) : 코드 위아래로 이동
    ctrl + / : 주석 처리
